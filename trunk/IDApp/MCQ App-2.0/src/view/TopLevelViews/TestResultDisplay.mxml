<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:components="view.components.*"
				   width="100%" height="100%" backgroundColor="#4A4849"
				   contentBackgroundColor="#706C6C"
				   xmlns:rs="imports.PageFlip.com.rubenswieringa.book.*"
				   borderVisible="true" borderWeight="1"
				   creationComplete="bordercontainer1_creationCompleteHandler(event)" 
				   xmlns:ResultPageRelated="view.components.ResultPageRelated.*"
				   creationPolicy="all">
	
	<fx:Style source="Styles/MCQStyles.css">
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import Controller.DataProcessor;
			import Controller.MCQConstants;
			
			import Events.TestSelectionEvent;
			
			import imports.PageFlip.com.rubenswieringa.book.*;
			import imports.PageFlip.com.rubenswieringa.book.BookEvent;
			
			import model.Question;
			import model.QuestionsProxy;
			import model.TestResultData;
			
			import mx.charts.ChartItem;
			import mx.charts.HitData;
			import mx.charts.chartClasses.ChartBase;
			import mx.charts.chartClasses.Series;
			import mx.charts.series.PieSeries;
			import mx.charts.series.items.ColumnSeriesItem;
			import mx.collections.ArrayCollection;
			import mx.collections.IViewCursor;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.utils.object_proxy;
			
			import spark.components.Application;
			
			public var pieChartData:ChartBase  = new ChartBase();
			
			[Bindable]
			public var testResult:TestResultData ;
			
			[Bindable]
			private var isFirstPageBeingShown:Boolean = true;		//this shows whether first page is being shown or not. and it will control the prev button visibility
			
			[Bindable]
			private var isLastPageBeingShown:Boolean = false;
			
			private const total_pages:int = 8;			//set this equal to the number of pages
			
			public function resetView():void
			{
				isFirstPageBeingShown = true;		//this shows whether first page is being shown or not. and it will control the prev button visibility
				
				isLastPageBeingShown = false;
				
				
			}
			
			public function disposeView():void
			{
				
			}

			//TODO: currently it takes data from proxy. Make it take a parameter as test result data object
			public function processData(quesProxy:QuestionsProxy):void
			{
				testResult = quesProxy.testResult;

				//TODO: update it later when the page is turned
				marksPieChartPage.updateView(quesProxy);
				markStatPage.updateView(quesProxy);
				
				timeStatPage.updateView(quesProxy);
				timeBarGraphPage.updateView(quesProxy);
				
				processView();
				resultBook.gotoPage(FirstBookPage, false);
			}
			
			protected function processView():void
			{
				if(parseInt(testResult.percentObtained) > 80)
				{
					frontPage.performanceLabel.text = "Your Performance is Good.";
					frontPage.performanceBar.setStyle("backgroundColor", 0x7eb874);
					frontPage.performanceLevel = 1;
				}
					
				else if(parseInt(testResult.percentObtained) > 50)
				{
					frontPage.performanceLabel.text = "You have average performance.";
					frontPage.performanceBar.setStyle("backgroundColor", 0xdad853);
					frontPage.performanceLevel = 2;
				}
					
				else
				{
					frontPage.performanceLabel.text = "You have low performance.";
					frontPage.performanceBar.setStyle("backgroundColor", 0xd66556);
					frontPage.performanceLevel = 3;
				}
				
			}
			
			protected function retakeButtonClicked(event:Event):void
			{
				var quesProxy:QuestionsProxy = DataProcessor.instance.quesProxy;
				
				var newEvent:TestSelectionEvent = new TestSelectionEvent(MCQConstants.testViewStartEventName);
				newEvent.testFolderPath = quesProxy.testBaseFolderPath;
				newEvent.testXmlName = quesProxy.testXmlName;
				dispatchEvent(newEvent);
			}
			
			protected function reviewButtonClicked(event:Event):void
			{
				var newEvent:Event = new Event(MCQConstants.testReviewEventName);
				dispatchEvent(newEvent);
			}
			
			protected function quitButtonClicked(event:Event):void
			{
				var newEvent:Event = new Event(MCQConstants.testQuitEventName);
				dispatchEvent(newEvent);
			}
			
			protected function nextPageButtonClicked(event:Event):void
			{
				resultBook.nextPage();
			}

			protected function prevPageButtonClicked(event:Event):void
			{
				resultBook.prevPage();
			}

			protected function resultBookStatsuChanged(event:BookEvent):void
			{
				if(resultBook.currentPage == -1)
				{
					prevPageButton.visible = false;
				}

				else if(resultBook.currentPage == total_pages - 1)
				{
					nextPageButton.visible = false;
				}

				else
				{
					nextPageButton.visible = true;
					prevPageButton.visible = true;
				}
				
				if(resultBook.currentPage == 3)
				{
//					Alert.show("now page is turned", "haha");	
				}
			}

			protected function bordercontainer1_creationCompleteHandler(event:FlexEvent):void
			{
				resultBook.addEventListener(BookEvent.PAGE_TURNED, resultBookStatsuChanged);
			}
			
			protected function showPerformanceImproveTip(event:Event):void
			{
				//TODO
				Alert.show("Work Hard and concentrate more to improve the score", "Golden Tips"); 
			}
			
			protected function showTimeStatHelpLink(event:Event):void
			{
				//TODO:
			}
			
		]]>
	</fx:Script>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace components "view.components.*";
		
		.resultGridStyle
		{
			percentWidth:100;
			height:60;
		}		
		
	</fx:Style>
	
	<s:states>
		<s:State name="quesStat"/>
	</s:states>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:SolidColor id="sc2" color="#68E31B" alpha=".8"/>
		<s:SolidColorStroke id="s1" color="#79B553" weight="2"/>
	</fx:Declarations>
	
	<ResultPageRelated:ResultSuggestionPage width="{MCQConstants.appWidth * 0.4}"
											height="{MCQConstants.appHeight * 0.8}"
											horizontalCenter="{MCQConstants.appWidth * (-0.2)}"
											top="40"/>
	
	<rs:Book id="resultBook" visible="true" width="{MCQConstants.appWidth * 0.8}"
			 height="{MCQConstants.appHeight * 0.8}" easing="0.7" flipOnClick="true"
			 horizontalCenter="0" sideFlip="true" top="40"
			 autoFlipDuration="600"
			 creationPolicy="auto">
		
		<rs:Page hard="true" id="FirstBookPage">
			<ResultPageRelated:ResultFrontPage 
				id="frontPage" 
				width="100%" height="100%"
				nextPageClicked="nextPageButtonClicked(event)"
				performanceImproveLinkClicked="{resultBook.gotoPage(performanceImprove)}"
				/>			
		</rs:Page>
		
		<rs:Page>
			<ResultPageRelated:marksStatsPage id="markStatPage"/>
		</rs:Page>
		
		<rs:Page>
			<ResultPageRelated:ResultPieChart id="marksPieChartPage"/>
		</rs:Page>
		
		<rs:Page>
			<ResultPageRelated:timeStatsPage 
				id="timeStatPage"
				timeStatsHelpLinkClicked="{resultBook.gotoPage(performanceAnalyze)}"
				/>
		</rs:Page>
		
		<rs:Page>
			<ResultPageRelated:ResultBarGraph id="timeBarGraphPage"/>
		</rs:Page>
		
		<rs:Page id="performanceImprove">
			<ResultPageRelated:performanceImprovementPage
				/>
		</rs:Page>
		
		<rs:Page id="performanceAnalyze">
			<ResultPageRelated:performanceAnalyzePage />
		</rs:Page>
		
		<rs:Page>
			<ResultPageRelated:ResultEndPage />
		</rs:Page>
		
	</rs:Book>
	
	<s:Button bottom="20" width="15%" height="5%" label="Retake Test" horizontalCenter="-100"
			  click="retakeButtonClicked(event)"/>
	
	<s:Button bottom="20" width="15%" height="5%" label="Review Test" horizontalCenter="100"
			  click="reviewButtonClicked(event)"/>

	<s:Button id="quitbutton" right="10" top="10" width="40" height="40" label="Quit"
			  skinClass="skins.roundButtonSkin"
			  click="quitButtonClicked(event)"/>
	
	<s:Button id="nextPageButton" visible="true" right="10" width="50" height="50"
			  label="Next" click="nextPageButtonClicked(event)" 
			  skinClass="skins.roundButtonSkin"
			  verticalCenter="0"/>
	
	<s:Button id="prevPageButton" visible="false" left="10" width="50" height="50"
			  label="Prev" click="prevPageButtonClicked(event)" skinClass="skins.roundButtonSkin"
			  verticalCenter="0"/>
	
</s:BorderContainer>
