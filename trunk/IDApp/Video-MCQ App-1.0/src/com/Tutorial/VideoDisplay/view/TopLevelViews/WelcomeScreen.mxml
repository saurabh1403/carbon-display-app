<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import adobe.utils.CustomActions;
			
			import com.Tutorial.VideoDisplay.Controller.DataParser;
			import com.Tutorial.VideoDisplay.Events.GenericEvent;
			import com.Tutorial.VideoDisplay.Events.VideoOptionsClickEvent;
			import com.Tutorial.VideoDisplay.Events.VideoPlayerEvent;
			import com.Tutorial.VideoDisplay.Events.VideoSelectionChangeEvent;
			import com.Tutorial.VideoDisplay.model.DataEntity;
			import com.Tutorial.VideoDisplay.model.VideoPlayConstants;
			import com.Tutorial.VideoDisplay.view.TopLevelViews.Level1VideoDisplay;
			import com.Tutorial.VideoDisplay.view.TopLevelViews.WelcomeScreen;
			
			import flash.display.DisplayObject;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.VideoDisplay;
			import mx.core.mx_internal;
			import mx.effects.easing.*;
			import mx.events.FlexEvent;
			
			import org.osmf.events.MediaPlayerStateChangeEvent;
			import org.osmf.media.MediaPlayerState;
			
			import spark.components.VideoDisplay;
			import spark.components.VideoPlayer;
			
			private const _aspectRatio:Number = 1.4;
			
			private var currView:Object = null;
			
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				
			}
			
			public function showScreen():void
			{
				var newEv:GenericEvent = new GenericEvent(VideoPlayConstants.subjectSelectionEvent);
				newEv.eventData.subjectName = "maths";
				onSubjectSelection(newEv);

			}
			
			protected function onVideoSelectionChange(ev:VideoSelectionChangeEvent):void
			{
				var i:int = ev.selectedDataIndex;
				var videoScr:Level1VideoDisplay = currView as Level1VideoDisplay;
				videoScr.playCurrentSelectedVideo(i);
			}
			
			//take the data entity object here
			protected function updateView():void
			{
				//take action to update the option icons accordingly
				
				for(var i:int = 0; i < 5; i++)
				{
					var newData:DataEntity = new DataEntity;
					newData.name = "title " + i.toString();
					//					videoDisplayScreen.videoItemsList.addItem(newData);
				}
			}
			
			
			private function showWelcomeScreen():void
			{
				var welScreen:WelcomeScreen = new WelcomeScreen;
				welScreen.addEventListener(VideoPlayConstants.subjectSelectionEvent, onSubjectSelection, false, 0, true);
				this.removeAllElements();
				this.addElement(welScreen);
				currView = welScreen;
				
			}
			
			protected function onSubjectSelection(event:GenericEvent):void
			{
				switch(event.eventData.subjectName)
				{
					case "maths":
						var _dataParser:DataParser = new DataParser(VideoPlayConstants.testBaseFolderPath, VideoPlayConstants.relativeMathsXmlPath, VideoPlayConstants.relativeContentPath, VideoPlayConstants.relativeResourcePath);
						var dataArrayColl:ArrayCollection = new ArrayCollection;
						if(!_dataParser.populateDataEntityFromXml(dataArrayColl))
						{
							Alert.show("Error in parsing xml. Reinstall the application");
						}
						else
						{
							showVideoScreen(dataArrayColl);
						}
						break;
					
					
					case "science":
					default:
						break;
				}
			}
			
			private function showVideoScreen(dataArrayColl:ArrayCollection):void
			{
				var videoScreen:Level1VideoDisplay = new Level1VideoDisplay;
				videoScreen.videoItemsList = dataArrayColl;
				videoScreen.addEventListener(VideoPlayConstants.videoSelectChangeEvent, onVideoSelectionChange, false, 0, true);
				this.removeAllElements();
				this.addElement(videoScreen);
				currView = null;
				currView = videoScreen;
			}
			
		]]>
	</fx:Script>

</s:Group>
