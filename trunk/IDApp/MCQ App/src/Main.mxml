<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   width="1020" height="750" xmlns:components="view.components.*"
					   creationComplete="windowedapplication1_creationCompleteHandler(event)"
					   showStatusBar="false"
					   >
	<fx:Script>
		<![CDATA[
			import Controller.DataProcessor;
			import Controller.MCQConstants;
			
			import Events.TestResultEvent;
			import Events.TestSelectionEvent;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import view.TopLevelViews.HomeDisplay;
			import view.TopLevelViews.TestResultDisplay;
			import view.TopLevelViews.TestRulesView;
			import view.TopLevelViews.TestView;
			import view.TopLevelViews.TestView2;
			
			var topLevelView:Dictionary = new Dictionary();
			
			public var testXmlPath:String = "D:\\test\\test.xml";
			
			public var testNumber:int = -1;
			
			//***************************to be called by the external module to init the test view*************
			public function initWithData(baseFolderPath:String, levelXmlPath:String):void
			{
				showHomeDisplay(null);
			}
			
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				MCQConstants.appWidth = this.width;
				MCQConstants.appHeight = this.height;
				
				DataProcessor.instance.quesProxy.reset();
				
				initWithData(MCQConstants.testBaseFolder, MCQConstants.levelXml);
			}
			
		   	protected function showHomeDisplay(event:Event):void
			{
				//reset all the variables here
				if(event !=null)
				{
//					event.target.disposeView();
				}
				
				DataProcessor.instance.quesProxy.reset();
				
				if(topLevelView[MCQConstants.HomeDisplayView] == null)
				{
					var hD:HomeDisplay = new HomeDisplay();
					topLevelView[MCQConstants.HomeDisplayView] = hD;
					hD.addEventListener(MCQConstants.testStartEventName, startTest, false, 0, true);
					hD.addEventListener(FlexEvent.CREATION_COMPLETE, homeViewCreationComplete, false, 0, true);
				}
				else
				{
					(topLevelView[MCQConstants.HomeDisplayView] as HomeDisplay).resetView();
					(topLevelView[MCQConstants.HomeDisplayView] as HomeDisplay).initWithData(MCQConstants.testBaseFolder, MCQConstants.levelXml);
				}
				
				this.removeAllElements();
				this.addElement(topLevelView[MCQConstants.HomeDisplayView] as HomeDisplay);
			}
			
			public function disposeView():void
			{
				for (var key:String in topLevelView)
				{
					topLevelView[key]= null;
					delete topLevelView[key];
				}
			}

			private function homeViewCreationComplete(event:Event):void
			{
				var homeView:HomeDisplay = event.target as HomeDisplay;
				homeView.initWithData(MCQConstants.testBaseFolder, MCQConstants.levelXml); 
			}
			
			protected function testCompleted(event:TestResultEvent):void
			{
				if(event!=null)
				{
					if(event.isTestMode)
						DataProcessor.instance.quesProxy.processQuestionsStats(event);

					if(topLevelView[MCQConstants.TestResultView] == null)
					{
						var testResult:TestResultDisplay = new TestResultDisplay();
						topLevelView[MCQConstants.TestResultView] = testResult;

						testResult.addEventListener(MCQConstants.testReviewEventName, startTestInReviewMode, false, 0, true);
						testResult.addEventListener(MCQConstants.testViewStartEventName, startTest, false, 0, true);
						testResult.addEventListener(MCQConstants.testQuitEventName, showHomeDisplay, false, 0, true);
					}
					else
					{
						(topLevelView[MCQConstants.TestResultView] as TestResultDisplay).resetView();
					}
					
					this.removeAllElements();
					this.addElement(topLevelView[MCQConstants.TestResultView]);
					(topLevelView[MCQConstants.TestResultView] as TestResultDisplay).processData(DataProcessor.instance.quesProxy);

				}
			}

			//TODO:
			protected function showErrorMsg():void
			{
				//show error dialogue here
				
			}
			
			protected function startTest(event:TestSelectionEvent):void
			{
				if(event !=null)
				{
//					event.target.disposeView();
				}

				else
				{
					showErrorMsg();
					return;
				}
			
				DataProcessor.instance.quesProxy.initProxyWithXml(event.testFolderPath, event.testXmlName);
				testNumber = event.testNumber;

				if(topLevelView[MCQConstants.TestRulesView] == null)
				{
					var testRules:TestRulesView = new TestRulesView();
					topLevelView[MCQConstants.TestRulesView] = testRules;
					
					testRules.addEventListener(MCQConstants.testViewStartEventName, startTestView, false, 0, true);
					testRules.addEventListener(MCQConstants.testQuitEventName, showHomeDisplay, false, 0, true);
				}
				else
				{
					(topLevelView[MCQConstants.TestRulesView] as TestRulesView).resetView();
				}
				
				this.removeAllElements();
				this.addElement(topLevelView[MCQConstants.TestRulesView]);
			}
			
			//just for testing
			protected function startTestView2(event:Event):void
			{
				var testView2:TestView2 = new TestView2();
				testView2.addEventListener(MCQConstants.testQuitEventName, showHomeDisplay, false, 0, true);
				this.removeAllElements();
				this.addElement(testView2);
				
			}
			
			protected function startTestView(event:Event):void
			{
				if(event !=null)
				{
//					event.target.disposeView();
				}
				event = null;
				
				
				if(topLevelView[MCQConstants.TestDisplayView] == null)
				{
					var currTestView:TestView = new TestView();
					topLevelView[MCQConstants.TestDisplayView] = currTestView;
					currTestView.setCurrentState("TestMode");
					
					currTestView.addEventListener(MCQConstants.testCompletedEventName, testCompleted, false, 0, true);
					currTestView.addEventListener(MCQConstants.testQuitEventName, showHomeDisplay, false, 0, true);
				}
				
				else
				{
					(topLevelView[MCQConstants.TestDisplayView] as TestView).setCurrentState("TestMode");
					(topLevelView[MCQConstants.TestDisplayView] as TestView).resetView();
				}

				this.removeAllElements();
				this.addElement(topLevelView[MCQConstants.TestDisplayView]);
			}
			
			protected function startTestInReviewMode(event:Event):void
			{
				if(event !=null)
				{
//					event.target.disposeView();
				}

				event = null;
				
				this.removeAllElements();
				
				if(topLevelView[MCQConstants.TestDisplayView] == null)
				{
					var currTestView:TestView = new TestView();
					topLevelView[MCQConstants.TestDisplayView] = currTestView;
					currTestView.setCurrentState("ReviewMode");
					
					currTestView.addEventListener(MCQConstants.testCompletedEventName, testCompleted, false, 0, true);
					currTestView.addEventListener(MCQConstants.testQuitEventName, showHomeDisplay, false, 0, true);
				}
				
				else
				{
					(topLevelView[MCQConstants.TestDisplayView] as TestView).setCurrentState("ReviewMode");
					(topLevelView[MCQConstants.TestDisplayView] as TestView).resetView();
				}
				
				this.addElement(topLevelView[MCQConstants.TestDisplayView]);
			}
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
</s:WindowedApplication>
