<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.  

@see spark.components.Button

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
				   minWidth="21" minHeight="21" 
				   alpha.disabled="0.5">
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.Button")]
		]]>
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		<![CDATA[         
			import spark.components.Group;
			/* Define the skin elements that should not be colorized. 
			For button, the graphics are colorized but the label is not. */
			static private const exclusions:Array = ["labelDisplay"];
			
			/** 
			 * @private
			 */     
			override public function get colorizeExclusions():Array {return exclusions;}
			
			/**
			 * @private
			 */
			override protected function initializationComplete():void
			{
				useChromeColor = true;
				super.initializationComplete();
			}  
			
			/**
			 *  @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
			{
				var cr:Number = getStyle("cornerRadius");
				
				//                if (cornerRadius != cr)
				//                {
				//                    cornerRadius = cr;
				//                    shadow.radiusX = cornerRadius;
				//                    fill.radiusX = cornerRadius;
				//                    lowlight.radiusX = cornerRadius;
				//                    highlight.radiusX = cornerRadius;
				//                    border.radiusX = cornerRadius;
				//                }
				//                
				//                if (highlightStroke) highlightStroke.radiusX = cornerRadius;
				//                if (hldownstroke1) hldownstroke1.radiusX = cornerRadius;
				//                if (hldownstroke2) hldownstroke2.radiusX = cornerRadius;
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			private var cornerRadius:Number = 2;
			
		]]>        
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" />
		<s:State name="down" />
		<s:State name="disabled" />
	</s:states>
	
	
	<s:Graphic x="0" y="0">
		<!-- Use Use compact syntax with absolute coordinates. -->
		<s:Path data="M 0 0
				H 27
				L 37 15
				L 27 30
				H 0
				C 10 30 10 0 0 0
				Z
				">
			
			<!-- Define the border color of the arrow. -->
			<s:stroke>
				<s:SolidColorStroke weight="1" weight.over="2" weight.down="1" color="0x242323" color.down="0xFA922A" color.over="0xACD9A3"/>
			</s:stroke>
			<!-- Define the fill for the arrow. -->
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="0xFFFFFF"
									 color.over="0xFFFFFF"
									 color.down="0xF7F0F0" />
					<s:GradientEntry color="0xDCDCDC"
									 color.over="0x92B88C" 
									 color.down="0x7BA374"/>
				</s:LinearGradient>
			</s:fill>
		</s:Path>
		<s:Image source="@Embed('assets/next.png')"
				 smooth="true"
				 smoothingQuality="high"
				 horizontalCenter="3"
				 verticalCenter="0"
				 width="80%"
				 height="80%"
				 scaleMode="stretch"
				 />
		
	</s:Graphic>
	
	
	
	
	<!-- layer 8: text -->
	<!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay  -->
	<s:Label id="labelDisplay"
			 textAlign="center"
			 maxDisplayedLines="1"
			 horizontalCenter="0" verticalCenter="1" verticalAlign="middle"
			 left="10" right="10" top="2" bottom="2">
	</s:Label>
	
</s:SparkButtonSkin>