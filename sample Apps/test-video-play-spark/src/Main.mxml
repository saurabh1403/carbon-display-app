<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="1100" height="760"
					   showStatusBar="false"
					   creationComplete="windowedapplication1_creationCompleteHandler(event)" 
					   stateChangeComplete="windowedapplication1_stateChangeCompleteHandler(event)"
					   xmlns:view="view.*">
	<fx:Script>
		<![CDATA[
			import mx.effects.Effect;
			
			import spark.effects.Fade;
			
			protected function windowedapplication1_stateChangeCompleteHandler(event:FlexEvent):void
			{
				switch(this.currentState)
				{
					case "StandardScreenState":
					{
						VideoOptionPanel.visible = true;
						break;
					}
						
					default:
					{
						VideoOptionPanel.visible = false;
						break;
					}
				}
				
			}
			
			//take the data entity object here
			protected function updateView():void
			{
				//take action to update the option icons accordingly
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:Move id="panelOut" target="{VideoOptionPanel}" yTo="0"
				 duration="1200" easingFunction="Bounce.easeOut"/>
		<mx:Move id="panelIn" target="{VideoOptionPanel}" yTo="-100"
				 duration="300" />
		
		<s:Fade id="fadeInEffect" duration="5000" alphaFrom="0" alphaTo="1"/>
		<s:Fade id="fadeOutEffect" duration="5000" alphaFrom="1" alphaTo="0"/>
		
	</fx:Declarations>
	

	<fx:Script>
		<![CDATA[
			import Events.VideoOptionsClickEvent;
			import Events.VideoPlayerEvent;
			
			import adobe.utils.CustomActions;
			
			import caurina.transitions.Tweener;
			
			import flash.display.DisplayObject;
			
			import mx.controls.Alert;
			import mx.controls.VideoDisplay;
			import mx.effects.easing.*;
			import mx.events.FlexEvent;
			
			import org.osmf.events.MediaPlayerStateChangeEvent;
			import org.osmf.media.MediaPlayerState;
			
			import spark.components.VideoDisplay;
			import spark.components.VideoPlayer;
			public var con:NetConnection;
			
			public var vidSrc:String = "assets/test2.flv";
			private const _aspectRatio:Number = 1.4;

			protected function testFn(event:VideoPlayerEvent):void
			{
				var videoWidth:uint = vid.width;
				var videoHeight:uint = vid.height;
				
				switch(event.eventTargetComponent)
				{
					case "fullScreenButton":
						
						if(event.eventTargetValue == 0)
						{
							Tweener.addTween(this.vid, {width: 850, 
								height: 650, time: 2});
							currentState = "StandardScreenState";
						}
						else
						{
							Tweener.addTween(this.vid, {width: this.width - 30, 
								transition: "easeOutQuad",
								height: this.height - 30, time: 2});
							currentState = "FullScreenState";
						}
					
						break;
					
					default:
						break;
				}
			}
			
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				vid.skin.addEventListener("testEvent", testFn, false, 0, true);
				var thisHeight:int = Capabilities.screenResolutionY *0.9;
				var thisWidth:int = thisHeight * _aspectRatio;
				
				nativeWindow.width = thisWidth;
				nativeWindow.height = thisHeight;
				
				nativeWindow.x = (Capabilities.screenResolutionX - nativeWindow.width) / 2;
				nativeWindow.y = (Capabilities.screenResolutionY - nativeWindow.height) / 2 - 20;
				
//				vid.addEventListener(MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE,vid_mediaPlayerStateChangeHandler, false, 0, true);
				vid.videoObject.smoothing = true;
				vid.videoObject.deblocking = 0;
//				this.invalidateDisplayList();
			}
			
			
			protected function vid_mediaPlayerStateChangeHandler(event:MediaPlayerStateChangeEvent):void
			{
				trace("in callback");
				if(event.state == MediaPlayerState.READY)
				{
					vid.videoObject.smoothing = true;
					vid.videoObject.deblocking = 0;
					
					vid.removeEventListener(MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE,vid_mediaPlayerStateChangeHandler) ;
				}
			}
			
			protected function VideoOptionsPanelClicked(e:VideoOptionsClickEvent):void
			{
				switch(e.eventTypeName)
				{
					case "OpenButton":
					{
						if(VideoOptionPanel.currentState == "Collapsed")
						{
							VideoOptionPanel.setCurrentState("Expanded");
							panelOut.play();
						}
						else
						{
							VideoOptionPanel.setCurrentState("Collapsed");
							panelIn.play();
						}
						
						break;
					}
						
					default:
					{
						break;
					}
				}
				
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="StandardScreenState"/>
		<s:State name="FullScreenState" />
	</s:states>
		
	<s:HGroup left="15" right="15" top="10" bottom="10" width="100%" height="100%"
			  contentBackgroundColor="#FDFCFC">

		<s:VGroup id="vg" width.StandardScreenState="80%" width.FullScreenState="100%" height="100%" color="0x5e5e5c">

			<s:Spacer height="4%" includeIn="StandardScreenState" minHeight="40"/>
	
			<s:VideoPlayer id="vid" visible="true" width="100%" 

						   height.FullScreenState="100%"
						   height="90%"
						   
						   top.FullScreenState="10" left.FullScreenState="10"
						   right.FullScreenState="10" bottom.FullScreenState="10"
						   
						   minWidth.StandardScreenState="850" minHeight.StandardScreenState="600"
						   maxWidth.StandardScreenState="850" maxHeight.StandardScreenState="650" 

						   skinClass="PlayerSkin"
						   source="{vidSrc}"
						   />

			<s:Spacer height="6%" includeIn="StandardScreenState"/>		
<!--			<s:BorderContainer width="100%" height="2%" color="0x00df34"
							   backgroundColor="#342F2F"
							   includeInLayout="false"/>
-->		</s:VGroup>

		<s:Spacer width="5%" includeIn="StandardScreenState"/>

		<s:BorderContainer top="10" bottom="10" width="15%" dropShadowVisible="true" focusEnabled="false"
						   includeIn="StandardScreenState"
						   maxWidth="100"
						   >
			
			<s:List id="subTopicsList" width="100%" height="100%" focusEnabled="false"></s:List>
		</s:BorderContainer>
	</s:HGroup>

	<view:videoOptionComp 
		left="15"
		id="VideoOptionPanel" y="-100" 
		width="85%" height="150"
		maxWidth.StandardScreenState="900"
		itemClickedEvent="VideoOptionsPanelClicked(event)"
		showEffect="fadeInEffect"
		hideEffect="fadeOutEffect"
		>
	</view:videoOptionComp>

</s:WindowedApplication>
