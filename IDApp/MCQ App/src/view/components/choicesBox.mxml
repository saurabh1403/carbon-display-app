<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 >
	<s:states>
		<s:State name="TestMode"/>
		<s:State name="ReviewMode"/>
	</s:states>
	<fx:Declarations>
		<s:RadioButtonGroup id="radiogroup1"
							/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout paddingLeft="5"
						  horizontalAlign="left" paddingBottom="15"
						  paddingRight="5" paddingTop="5">
			
		</s:VerticalLayout>
	</s:layout>

	<fx:Script>
		<![CDATA[
			import Controller.MCQConstants;
			
			import Events.ChoiceElementEvent;
			
			import model.Question;
			
			import mx.controls.Label;
			import mx.events.ItemClickEvent;
			
			import spark.primitives.Line;
			
			import view.widgets.choiceRadioButton;

			//auto resizable choice box
			private var currQues:Question;
			
			private var choicesSelected:int = -1;		
			private var choiceSelectedWeight:int = 1;		//1 means no item selected
			
			public function reset():void
			{
				//remove all elements
				this.removeAllElements();
				currQues = null;
				choicesSelected = -1;
				choiceSelectedWeight = 1;
			}
			
			public function populateChoices(_currQues:Question):void
			{
				reset();
				currQues = _currQues;
				setData();
			}
			
			//this creates the radio buttons. This will not work for checkbox choices type
			private function setData():void
			{
				for(var i:int = 0; i < currQues.choices.length; i++)
				{
					var radioElement:choiceRadioButton = new choiceRadioButton();
					radioElement.width = this.width;
					radioElement.id = (i+1).toString();
					radioElement.setCurrentState(currentState);
					radioElement.elementNumber = i;
					radioElement.addEventListener("ff", radiogroup1_itemClickHandler);
					radioElement.initRadioChoice(radiogroup1, (currQues.choices[i].choice as String), (currQues.userAnswer == i), currQues.choices[i].correctAnswer);
					this.addElement(radioElement);
				}
				
			}

			//this commits the selection done by the user
			//this returns the different state of the selection by user- attempted, marked for review etc.
			public function commitSelectedOptions():int
			{
				if(choiceSelectedWeight == 1)
				{
					return MCQConstants.quesUnAttempted;
				}
				
				else
				{
					currQues.userAnswer = choicesSelected;
					currQues.userAnswerWeight = choiceSelectedWeight;
					return MCQConstants.questAttempted;
				}

				return 1;
			}
			
			protected function radiogroup1_itemClickHandler(event:ChoiceElementEvent):void
			{
				
				choicesSelected = event.choiceSelection;
				choiceSelectedWeight = MCQConstants.primeNumberArray[event.choiceSelection];		//in case of checkbox, this should be multiplied by previous value. this is a multiplication of prime numbers
			}
			
		]]>
	</fx:Script>
	
</s:Group>
