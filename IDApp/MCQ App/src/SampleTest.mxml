<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   width="1020" height="750" xmlns:components="view.components.*"
					   creationComplete="windowedapplication1_creationCompleteHandler(event)"
					   showStatusBar="false"
					   >
	<fx:Script>
		<![CDATA[
			import Controller.DataProcessor;
			import Controller.MCQConstants;
			
			import Events.TestResultEvent;
			import Events.TestSelectionEvent;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import view.TopLevelViews.HomeDisplay;
			import view.TopLevelViews.TestResultDisplay;
			import view.TopLevelViews.TestRulesView;
			import view.TopLevelViews.TestView;
			import view.TopLevelViews.TestView2;

			public var testXmlPath:String = "D:\\test\\test.xml";

			public var testNumber:int = -1;

			//***************************to be called by the external module to init the test view*************
			public function initWithData(baseFolderPath:String, levelXmlPath:String):void
			{
				showHomeDisplay(null);
			}

			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				MCQConstants.appWidth = this.width;
				MCQConstants.appHeight = this.height;
				
				DataProcessor.instance.quesProxy.reset();
				
				initWithData(MCQConstants.testBaseFolder, MCQConstants.levelXml);
			}

			protected function showHomeDisplay(event:Event):void
			{
				//reset all the variables here
				if(event !=null)
				{
					event.target.disposeView();
				}

				DataProcessor.instance.quesProxy.reset();
				var homeView:HomeDisplay = new HomeDisplay();
				homeView.addEventListener(MCQConstants.testStartEventName, startTest, false, 0, true);
				homeView.addEventListener(FlexEvent.CREATION_COMPLETE, homeViewCreationComplete, false, 0, true);

				this.removeAllElements();
				this.addElement(homeView);
			}
			
			private function homeViewCreationComplete(event:Event):void
			{
				var homeView:HomeDisplay = event.target as HomeDisplay;
				homeView.initWithData(MCQConstants.testBaseFolder, MCQConstants.levelXml); 
			}

			protected function testCompleted(event:TestResultEvent):void
			{
				if(event!=null)
				{
					if(event.isTestMode)
						DataProcessor.instance.quesProxy.processQuestionsStats(event);
					
					var testResult:TestResultDisplay = new TestResultDisplay(); 
					
					testResult.addEventListener(MCQConstants.testReviewEventName, startTestInReviewMode, false, 0, true);
					testResult.addEventListener(MCQConstants.testViewStartEventName, startTest, false, 0, true);
					testResult.addEventListener(MCQConstants.testQuitEventName, showHomeDisplay, false, 0, true);
					
					this.removeAllElements();
					this.addElement(testResult);
					testResult.processData(DataProcessor.instance.quesProxy);
				}
			}
			
			//TODO:
			protected function showErrorMsg():void
			{
				//show error dialogue here
				
			}

			protected function startTest(event:TestSelectionEvent):void
			{
				if(event !=null)
				{
					event.target.disposeView();
				}
				else
				{
					showErrorMsg();
					return;
				}

				var newTest:TestRulesView = new TestRulesView();

				DataProcessor.instance.quesProxy.initProxyWithXml(event.testFolderPath, event.testXmlName);
				testNumber = event.testNumber;

				newTest.addEventListener(MCQConstants.testViewStartEventName, startTestView, false, 0, true);
				newTest.addEventListener(MCQConstants.testQuitEventName, showHomeDisplay, false, 0, true);

				//get the test number here and then start the test
				this.removeAllElements();

				this.addElement(newTest);
			}

			protected function startTestView2(event:Event):void
			{
				var testView2:TestView2 = new TestView2();
				testView2.addEventListener(MCQConstants.testQuitEventName, showHomeDisplay, false, 0, true);
				this.removeAllElements();
				this.addElement(testView2);

			}

			protected function startTestView(event:Event):void
			{
				if(event !=null)
				{
					event.target.disposeView();
				}
				event = null;

				var testView:TestView = new TestView();
				
				testView.setCurrentState("TestMode");

				testView.addEventListener(MCQConstants.testCompletedEventName, testCompleted, false, 0, true);
				testView.addEventListener(MCQConstants.testQuitEventName, showHomeDisplay, false, 0, true);
				this.removeAllElements();
				this.addElement(testView);

			}

			protected function startTestInReviewMode(event:Event):void
			{
				if(event !=null)
				{
					event.target.disposeView();
				}
				event = null;

				this.removeAllElements();
				var testView:TestView = new TestView();
				testView.setCurrentState("ReviewMode");
				testView.addEventListener(MCQConstants.testCompletedEventName, testCompleted, false, 0, true);
				this.addElement(testView);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
</s:WindowedApplication>
