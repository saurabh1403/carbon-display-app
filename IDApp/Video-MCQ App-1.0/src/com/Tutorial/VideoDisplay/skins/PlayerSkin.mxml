<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark VideoPlayer component.  

@see spark.components.VideoPlayer

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabledStates="0.5" 
			 chromeColor.fullScreenStates="0xCCCCCC">
	<!-- A chrome color of 0xCCCCCC in the fullScreenStates means we ignore the chromeColor property 
	all together as 0xCCCCCC is essentially just a no-op color transform -->
	
	<!-- host component -->
	<fx:Metadata>
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.VideoPlayer")]
		
		[Event(name="screenStateChangeEvent", type="flash.events.Event")]
		[Event(name="previousItemPlayEvent", type="flash.events.Event")]
		[Event(name="nextItemPlayEvent", type="flash.events.Event")]
		
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		<![CDATA[
			import com.Tutorial.VideoDisplay.Events.VideoPlayerEvent;
			/* Define the skin elements that should not be colorized. */
			static private const exclusions:Array = ["videoDisplay", "playPauseButton", "scrubBar", 
				"currentTimeDisplay", "durationDisplay"];
			
			[Bindable]
			public var isAutoRepeatOn:Boolean = false; 
			
			/**
			 * @private
			 */
			override protected function initializationComplete():void
			{
				useChromeColor = true;
				super.initializationComplete();
			}
			
			/**
			 * @private
			 */
			override public function get colorizeExclusions():Array 
			{
				return exclusions;
			}
			
			/**
			 * @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				dropShadow.visible = getStyle("dropShadowVisible");
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			protected function fullScreenButton1_clickHandler(event:MouseEvent):void
			{
				var newEvent:VideoPlayerEvent = new VideoPlayerEvent("screenStateChangeEvent");
				
				switch(event.target.id.toString())
				{
					case "fullScreenButton1":
						newEvent.eventTargetComponent = "fullScreenButton";
						newEvent.eventTargetValue = ((event.target as ToggleButton).selected) ? 1 : 0;
						break;
					
					default:
						break;
				}

				this.dispatchEvent(newEvent);
			}
			
			protected function toggle_sound(event:Event):void
			{
				if (event.target.selected)
				{
					videoDisplay.volume = 0;                
					volumeButton.toolTip = "Unmute";
				}
				else
				{
					videoDisplay.volume = (volumeSlider.value/100);                
					volumeButton.toolTip =  "Mute";
				}
			}
			
			protected function onNextItemClick(event:MouseEvent):void
			{
				var newEv:Event = new Event("nextItemPlayEvent");
				this.dispatchEvent(newEv);
			}
			
			protected function onPrevItemClick(event:MouseEvent):void
			{
				var newEv:Event = new Event("previousItemPlayEvent");
				this.dispatchEvent(newEv);
				
			}
			
			
		]]>
		
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="uninitialized" stateGroups="uninitializedStates, normalStates" />
		<s:State name="loading" stateGroups="loadingStates, normalStates" />
		<s:State name="ready" stateGroups="readyStates, normalStates" />
		<s:State name="playing" stateGroups="playingStates, normalStates" />
		<s:State name="paused" stateGroups="pausedStates, normalStates" />
		<s:State name="buffering" stateGroups="bufferingStates, normalStates" />
		<s:State name="playbackError" stateGroups="playbackErrorStates, normalStates" />
		<s:State name="disabled" stateGroups="disabledStates, normalStates"/>
		<s:State name="uninitializedAndFullScreen" stateGroups="uninitializedStates, fullScreenStates" />
		<s:State name="loadingAndFullScreen" stateGroups="loadingStates, fullScreenStates" />
		<s:State name="readyAndFullScreen" stateGroups="readyStates, fullScreenStates" />
		<s:State name="playingAndFullScreen" stateGroups="playingStates, fullScreenStates" />
		<s:State name="pausedAndFullScreen" stateGroups="pausedStates, fullScreenStates" />
		<s:State name="bufferingAndFullScreen" stateGroups="bufferingStates, fullScreenStates" />
		<s:State name="playbackErrorAndFullScreen" stateGroups="playbackErrorStates, fullScreenStates" />
		<s:State name="disabledAndFullScreen" stateGroups="disabledStates, fullScreenStates"/>
	</s:states>
	
	<!-- drop shadow -->
	<!--- @private -->
	<s:RectangularDropShadow id="dropShadow" blurX="17" blurY="17" alpha="0.32" distance="4" 
							 angle="90" color="#131313" left="0" top="0" right="0" bottom="0" 
							 excludeFrom="fullScreenStates"/>
	
	<!-- border of the component -->
	<s:Rect bottom="1" left="1" right="1" top="1"
			bottom.fullScreenStates="0" left.fullScreenStates="0" 
			right.fullScreenStates="0" top.fullScreenStates="0">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xFFFAD5" color.fullScreenStates="0x1E1E1E" alpha.fullScreenStates="0.55"/>
				<s:GradientEntry color="0xFFFAD5" color.fullScreenStates="0x585858" alpha.fullScreenStates="0.55"/>
			</s:LinearGradient>		
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke weight="3" color="0x000000"/>
		</s:stroke>
		
	</s:Rect>
	
	<!--- Video and player controls are clipped if they exceed the size of the 
	component, but the drop shadow above is not clipped and sizes to the component.
	We also set verticalScrollPosition so that when we do clip, rather than clipping  
	off the bottom first, we clip off the top fist.  This is so the player controls 
	are still visible when we start clipping. -->
	<s:Group id="clippedGroup" visible="true" left="6" right="6" top="6" bottom="6"
			 clipAndEnableScrolling="true"
			 verticalScrollPosition="{Math.max(0, 184-clippedGroup.height)}"
			 >
		
		<!-- There's a minimum size for the video and controls.  If we go below that
		we are clipped. -->
		<s:Group minWidth="263" minHeight="184"
				 width="100%" height="100%">
			
			<!-- background when the videoDisplay doesn't fill its whole spot -->
			<s:Rect bottom="0" left="0" right="0" top="0"
					bottom.fullScreenStates="0" left.fullScreenStates="0" 
					right.fullScreenStates="0" top.fullScreenStates="0">
				<s:fill>
					<s:SolidColor color="0x343634" />
				</s:fill>
				<s:stroke>
					<s:LinearGradientStroke weight="3" rotation="90">
						<s:GradientEntry color="0x000000" color.fullScreenStates="0xFFFFFF" alpha.fullScreenStates="0.12" />
						<s:GradientEntry color="0x665959" color.fullScreenStates="0xFFFFFF" alpha.fullScreenStates="0.12" />
						<s:GradientEntry color="0x105B63" color.fullScreenStates="0xFFFFFF" alpha.fullScreenStates="0.09" />
					</s:LinearGradientStroke>
				</s:stroke>
				
			</s:Rect>
			
			<s:VGroup visible="true" left="4" right="4" top="4" bottom="4" horizontalAlign="center"
					  gap="2">
				
				<!--- @copy spark.components.VideoPlayer#videoDisplay -->
				<s:VideoDisplay id="videoDisplay" 
								height="100%" width="100%"
								visible="true"
								focusEnabled="false"
								scaleMode="stretch"
								volume="{volumeSlider.value/100}"
								/>
				
				
				<!-- scrubbar + the currentTime/duration labels -->
				<s:Group height="100%" width="100%"
						 maxHeight="30">
					
					
					<!-- background for scrubbar + the currentTime/duration -->
					<s:Rect left="0" right="0" top="0" bottom="0">
						<s:fill>
							<s:LinearGradient rotation="90">
								<s:GradientEntry color="0x858383"/>
								<s:GradientEntry color="0x5f5f5f"/>
								<s:GradientEntry color="0x3f3f3f"/>
							</s:LinearGradient>
						</s:fill>
					</s:Rect>
					
					<!-- one pixel border -->
					<s:Rect left="1" right="1" top="1" bottom="1" visible="true">
						<s:stroke>
							<s:LinearGradientStroke weight="2" rotation="90">
								<s:GradientEntry color="0x383838" color.fullScreenStates="0xFFFFFF" alpha.fullScreenStates="0.12" />
								<s:GradientEntry color="0x000000" color.fullScreenStates="0xFFFFFF" alpha.fullScreenStates="0.09" />
							</s:LinearGradientStroke>
						</s:stroke>
					</s:Rect>
					
					<!-- scrub bar + currentTime/duration in a HorizontalLayout -->
					<s:Group left="0" right="0" height="100%" horizontalCenter="0" 
							 >
						<s:layout>
							<s:HorizontalLayout verticalAlign="middle" gap="1" />
						</s:layout>
						
						<!-- spacer -->
						<s:Rect width="7" height="1" />
						
						<s:Label id="currentTimeDisplay" color.fullScreenStates="0xFFFFFF" color="0xFAFAFA"
								 focusEnabled="false"/>
				
						<!--- @copy spark.components.VideoPlayer#scrubBar -->
						<s:ScrubBar id="scrubBar" width="100%" liveDragging="true"
									skinClass="com.Tutorial.VideoDisplay.skins.ScrubBarSkinModified"
									focusEnabled="false"
									/>
					
						<!-- spacer -->
						<s:Rect width="8" height="1" />
						
						<!--- @copy spark.components.VideoPlayer#currentTimeDisplay -->
						
				
						<!--- @copy spark.components.VideoPlayer#durationDisplay -->
						<s:Label id="durationDisplay" color.fullScreenStates="0xFFFFFF" color="0xFAFAFA"
								 focusEnabled="false"/>
						
						<!-- spacer -->
						<s:Rect width="8" height="1" />
					</s:Group>
					
				</s:Group>
				
				<!-- video player controls -->
				<!--- @copy spark.components.VideoPlayer#playerControls -->
				<s:Group bottom="0" horizontalCenter="0" left="0" right="0" 
						 width="100%" height="100%"
						 maxHeight="55" minHeight="30"
						 id="playerControls"
						 visible="true">
					
					<s:Rect left="0" right="0" top="0" bottom="0">
						<s:fill>
							<s:LinearGradient rotation="90">
								<s:GradientEntry color="0x171515" alpha="1.0"/>
								<s:GradientEntry color="0x171515" alpha="0.6"/>
								<s:GradientEntry color="0x171515" alpha="1.0"/>
							</s:LinearGradient>
						</s:fill>
					</s:Rect>
					
					<!-- the central controls of the video player.minimum size of the control bar should be  400-->
					<s:Group horizontalCenter="0" verticalCenter="0" width="50%" minWidth="400" maxWidth="600"
							 height="90%" maxHeight="70" minHeight="55" >
						
						<!--  border for the video main controls (pause/play/next etc.) -->
						<s:Rect horizontalCenter="0" verticalCenter="0"
								width="100%" height="42"
								bottomLeftRadiusX="20" bottomRightRadiusX="20"
								topLeftRadiusX="20" topRightRadiusX="20"
								>
							<s:stroke>
								<s:SolidColorStroke color="0x141414" weight="2" alpha="0"/>
							</s:stroke>
						</s:Rect>
						
						<!-- the central circular part -->
						<s:Ellipse horizontalCenter="0" verticalCenter="0"
								   width="53" height="53"
								   >
							<s:stroke>
								<s:SolidColorStroke color="0x141414" weight="2" alpha="0"/>
							</s:stroke>
							<s:fill>
								<s:LinearGradient rotation="90">
									<s:GradientEntry color="0xFFD34E" alpha="1.0"/>
									<s:GradientEntry color="0xF77417" alpha="1.0"/>
								</s:LinearGradient>
							</s:fill>
						</s:Ellipse>
						
						<!-- filling the centre part-->
						<s:Rect horizontalCenter="0" verticalCenter="0"
								left="2" right="2" height="40"
								bottomLeftRadiusX="20" bottomRightRadiusX="20"
								topLeftRadiusX="20" topRightRadiusX="20"
								>
							<s:fill>
								<s:LinearGradient rotation="90">
									<s:GradientEntry color="0xFFD34E" alpha="1.0"/>
									<s:GradientEntry color="0xF77417" alpha="1.0"/>
								</s:LinearGradient>
							</s:fill>
						</s:Rect>
						
						<!--  auto repeat button -->
						<s:ToggleButton id="autoRepeatButton" left="40" width="26" height="27"
										click="fullScreenButton1_clickHandler(event)"
										focusEnabled="true" focusIn="event.target.depth=1"
										toolTip="Toggle AutoRepeat"
										selected="@{isAutoRepeatOn}"
										focusOut="event.target.depth=0" layoutDirection="ltr"
										skinClass="com.Tutorial.VideoDisplay.skins.AutoRepeatButtonSkinModified" verticalCenter="0"/>
						
						<!--  stop button -->
						<s:Button visible="true" left="100" width="27" height="29"
								  click="{videoDisplay.stop()}"
								  skinClass="com.Tutorial.VideoDisplay.skins.stopButtonSkinModified"
								  toolTip="Stop" verticalCenter="0"/>
					
						
						<!--  prev item click button -->
						<s:Button visible="true" width="40" height="32"
								  click="onPrevItemClick(event)"
								  horizontalCenter="-40" skinClass="com.Tutorial.VideoDisplay.skins.prevVideoItemClickSkin"
								  toolTip="Previous"
								  verticalCenter="0"/>
					
						<!--- @copy spark.components.VideoPlayer#playPauseButton -->
						<s:ToggleButton id="playPauseButton" left="10" bottom="0" width="50"
										horizontalCenter="0" verticalCenter="0"
										height="50" focusIn="event.target.depth=1"
										focusOut="event.target.depth=0" layoutDirection="ltr"
										skinClass="com.Tutorial.VideoDisplay.skins.ToggleButtonModified"
										/>
					
						<!--  next item click button -->
						<s:Button visible="true" width="40" height="32"
								  click="onNextItemClick(event)"
								  horizontalCenter="43" skinClass="com.Tutorial.VideoDisplay.skins.nextVideoItemClickSkin"
								  toolTip="Next"
								  verticalCenter="0"/>
						
						<s:ToggleButton id="volumeButton" right="100" width="23" height="23"
										click="toggle_sound(event)"
										focusEnabled="true" focusIn="event.target.depth=1"
										focusOut="event.target.depth=0" layoutDirection="ltr"
										skinClass="com.Tutorial.VideoDisplay.skins.volumeButtonSkinModified" verticalCenter="0"
										/>
						
						<s:HSlider id="volumeSlider" right="20" width="70" dataTipPrecision="0"
								   liveDragging="true" maximum="100" minimum="0"
								   skinClass="com.Tutorial.VideoDisplay.skins.volumeSliderSkinModified" snapInterval=".01"
								   stepSize=".01" value="70" verticalCenter="0"
								   change="{volumeButton.selected = false}"
								   toolTip="Volume"
								   />
						
					</s:Group>
					
					<s:ToggleButton id="fullScreenButton1" width="30" right="15"
									verticalCenter="0"
									height="30" focusIn="event.target.depth=1"
									focusOut="event.target.depth=0" layoutDirection="ltr"
									skinClass="com.Tutorial.VideoDisplay.skins.FullScreenButtonModified"
									click="fullScreenButton1_clickHandler(event)"
									toolTip="Toggle fullScreen Mode"
									/>
					
				</s:Group>
				
				
			</s:VGroup>
			
			<!-- border -->
			<s:Rect left="0" right="0" top="0" bottom="0" excludeFrom="fullScreenStates" visible="false">
				<s:stroke>
					<s:SolidColorStroke color="0x131313" />
				</s:stroke>
			</s:Rect>
			
		</s:Group>
	</s:Group>
</s:SparkSkin>
