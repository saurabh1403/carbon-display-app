<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   applicationComplete="windowedapplication1_applicationCompleteHandler(event)"
					   activate="windowedapplication1_activateHandler(event)"
					   xmlns:components="com.Tutorial.view.components.*"
					   creationComplete="windowedapplication1_creationCompleteHandler(event)"
					   width="800" height="600"
					   showStatusBar="false"
					   autoLayout="true"
					   close="windowedapplication1_closeHandler(event)"
					   >
	
	<fx:Style source="/assets/tutorialStyle.css" />
	
	<fx:Script>
		<![CDATA[
			import com.Tutorial.ApplicationFacade;
			import com.Tutorial.business.NativeCommunicator;
			import com.Tutorial.business.TutConstants;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			[Bindable]
			[Embed(source="/assets/images/backgroundImage.jpg")]
			private var bkgndImage:Class;
			
			private var nCounter:int = 0;
			
			public static var _appInstance:Tutorial;	
			
			protected function windowedapplication1_applicationCompleteHandler(event:FlexEvent):void
			{				
				_appInstance = this;
				ApplicationFacade.getInstance().startup(this);
				
				//start loading different contents in the backend:
				
				//1. load the native executable.....This is not being done right now here.....
				//2. 
				if(!NativeCommunicator.initiateNativeProcess())
				{
					Alert.show("Unable to initialize. Quitting...");
					return;
				}
				
				//So, finally decided to use it as a timeout timer only. If by 10 seconds, the native process is not launched, then it is treated as an error case and the process will be aborted.
				timer = new Timer(TIMER_VAL);
				timer.addEventListener(TimerEvent.TIMER, timerHandler, false, 0, true);
				timer.start();
			}
			private var timer:Timer;
			private static var TIMER_VAL:Number = 5000;
			private function timerHandler(event:TimerEvent):void
			{
				if(!NativeCommunicator.instance.bNativeLaunched)
				{
					//This means native could not be launched even after 10 seconds. Aborting
					////NativeCommunicator.closeNativeSession();		//I think this should not be called
					//TODO : What to do to terminate App....
				}
				else
				{
					//this means native process has been launched and splash screen has been shown for a minimum of TIMER_VAL seconds
					if(!NativeCommunicator.instance.getAllPackageData())
					{
						Alert.show("Unable to get package data. Quitting");
						//<TODO: Send a call to native to quit......
						NativeCommunicator.closeNativeSession();
					}
				}
				
				timer.stop();
			}
			
			
			protected function windowedapplication1_activateHandler(event:Event):void
			{
				//add functionality to handle any case where user brings the focus back to this application
				ApplicationFacade.getInstance().sendNotification(TutConstants.N_WINDOWACTIVATED);
			}
			
			protected function image1_creationCompleteHandler(event:FlexEvent):void
			{
				//this.visible = true;
			}
			
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				var splashScreen:NativeWindow = this.nativeWindow;
				splashScreen.x = (Screen.mainScreen.visibleBounds.width -
					splashScreen.width) / 2;
				splashScreen.y = (Screen.mainScreen.visibleBounds.height -
					splashScreen.height) / 2; 
			}
			
			
			protected function image1_clickHandler(event:MouseEvent):void
			{
				//proceedToMainView();
			}
			
			public function proceedToMainView():void
			{
				myCan.visible = false;
				myCan.includeInLayout = false;
				mainDisplay.visible = true;
				mainDisplay.includeInLayout = true;
				
				//this.maximize();
				mainDisplay.maxBtn_clickHandler(null);
				
				var splashScreen:NativeWindow = this.nativeWindow;
				splashScreen.width = TutConstants.WINDOWWIDTH;
				splashScreen.height = TutConstants.WINDOWHEIGHT;
				splashScreen.x = (Screen.mainScreen.visibleBounds.width -
					splashScreen.width) / 2;
				splashScreen.y = (Screen.mainScreen.visibleBounds.height -
					splashScreen.height) / 2;
			}
			
			protected function windowedapplication1_closeHandler(event:Event):void
			{
				if(NativeCommunicator.instance.bNativeLaunched)
				{
					NativeCommunicator.closeNativeSession();
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<mx:Canvas width="100%" height="100%" id="myCan">
		<mx:Image x="0" y="0" source="{bkgndImage}"
				  width="100%" height="{myCan.height}"
				  creationCompleteEffect="Fade"
				  creationComplete="image1_creationCompleteHandler(event)"
				  click="image1_clickHandler(event)"/>
		<mx:VBox width="100%" height="100%">
			<mx:Spacer height="100%"/>
			<mx:HBox width="100%">
				<mx:Spacer width="10%"/>
				<mx:ProgressBar width="80%" indeterminate="true" height="10"
								label="Loading..." color="white"
								trackHeight="24"/>
				<mx:Spacer width="10%"/>
			</mx:HBox>
			<mx:Spacer height="100%"/>
		</mx:VBox>
		
		<!--		<mx:Tree width="100%" height="100%"
		dataProvider="{temp}"
		depth="1"
		labelField="name"
		defaultLeafIcon="{tIcon}"
		/>-->
	</mx:Canvas>
	
	<components:MainDisplay id="mainDisplay" height="100%" width="100%" visible="false" includeInLayout="false"
							backgroundColor="0x888888"/>
</s:WindowedApplication>
